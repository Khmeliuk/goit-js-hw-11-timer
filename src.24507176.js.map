{"version":3,"sources":["partials/timer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","timerRef","document","querySelector","valueRef","days","hours","minutes","secs","start","setInterval","startTame","Date","now","time","mins","timeConvector","textContent","pad","Math","floor","String","padStart","timer"],"mappings":";;;AAyBA,MAAMA,EACFC,aAAY,SAACC,EAAD,WAAWC,IAEdA,KAAAA,WAAaA,EACbC,KAAAA,SAAWC,SAASC,cAAcJ,GAClCK,KAAAA,SAAW,CACZC,KAAM,KAAKJ,SAASE,cAAc,uBAClCG,MAAO,KAAKL,SAASE,cAAc,wBACnCI,QAAS,KAAKN,SAASE,cAAc,uBACrCK,KAAM,KAAKP,SAASE,cAAc,wBAEjCM,KAAAA,QAGRA,QAEGC,YAAY,KACFC,MAAAA,EAAYC,KAAKC,MAEjBC,EAAO,KAAKd,WAAaW,EAE3B,IAAA,KAAEN,EAAF,MAAQC,EAAR,KAAeS,EAAf,KAAqBP,GAAS,KAAKQ,cAAcF,GAChDV,KAAAA,SAASC,KAAKY,YAAcZ,EAC5BD,KAAAA,SAASE,MAAMW,YAAcX,EAC7BF,KAAAA,SAASG,QAAQU,YAAcF,EAC/BX,KAAAA,SAASI,KAAKS,YAAcT,GAClC,KAGPQ,cAAcF,GAKP,MAAA,CAAET,KAJI,KAAKa,IAAIC,KAAKC,MAAMN,EAAQ,QAI1BR,MAHD,KAAKY,IAAIC,KAAKC,MAAON,EAAQ,MAAyB,OAG9CC,KAFT,KAAKG,IAAIC,KAAKC,MAAON,EAAQ,KAAoB,MAElCN,KADf,KAAKU,IAAIC,KAAKC,MAAON,EAAQ,IAAc,OAI3DI,IAAIJ,GACMO,OAAAA,OAAOP,GAAMQ,SAAS,EAAE,MAKnC,MAAMC,EAAQ,IAAI1B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIY,KAAK;;ACrEvB,aADA,QAAA,oBACA,QAAA","file":"src.24507176.js","sourceRoot":"../src","sourcesContent":["/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\n\nclass CountdownTimer{\n    constructor({selector, targetDate})\n    {\n        this.targetDate = targetDate;\n        this.timerRef = document.querySelector(selector);\n        this.valueRef = {\n            days: this.timerRef.querySelector('[data-value=\"days\"]'),\n            hours: this.timerRef.querySelector('[data-value=\"hours\"]'),\n            minutes: this.timerRef.querySelector('[data-value=\"mins\"]'),\n            secs: this.timerRef.querySelector('[data-value=\"secs\"]'),\n        };\n        this.start();\n    }\n\n     start() {\n        \n        setInterval(() => {\n            const startTame = Date.now();\n           \n            const time = this.targetDate - startTame;\n            \n            let { days, hours, mins, secs } = this.timeConvector(time);\n            this.valueRef.days.textContent = days;\n            this.valueRef.hours.textContent = hours;\n            this.valueRef.minutes.textContent = mins;\n            this.valueRef.secs.textContent = secs;\n        }, 1000);\n    \n    };\n    timeConvector(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n    };\n\n pad(time) {\n    return String(time).padStart(2,'0')\n    };\n  \n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 17, 2022'),\n});\n// timer.start();\n","import './sass/main.scss';\nimport './partials/timer';\n\n\n\n\n\n\n"]}